<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-02T23:24:50+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Home</title><subtitle>Senior Data Scientist | Machine Learning Engineer | Solution Architect</subtitle><author><name>Zhiwei Zhang</name></author><entry><title type="html">Feedback about Luigi Pipeline</title><link href="http://localhost:4000/blog/feedback-about-luigi-pipeline/" rel="alternate" type="text/html" title="Feedback about Luigi Pipeline" /><published>2023-03-02T21:08:15+01:00</published><updated>2023-03-02T21:08:15+01:00</updated><id>http://localhost:4000/blog/feedback-about-luigi-pipeline</id><content type="html" xml:base="http://localhost:4000/blog/feedback-about-luigi-pipeline/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In data science project, normally data scientists would use jupyter notebooks for developing Machine Learning
models. A good thing about jupyter notebooks is the interactiveness with end user. No matter which Machine Learning 
library you use, scikit-learn, tensorflow or pytorch, with jupyter notebook you can develop your model step by step
and check the intermediate outputs at every time.&lt;/p&gt;

&lt;p&gt;However, when the DS project is in production environment, the ML model training pipeline should be already stable 
and the interactiveness of jupyter notebook becomes less and less important. Should we then stop using jupyter notebooks
at this point? What’s the alternative solution? I think many people would ask these two questions. And the answer is quite simple,
use the ML pipeline library to build your ML model training pipeline.&lt;/p&gt;

&lt;h1 id=&quot;machine-learning-pipeline&quot;&gt;Machine Learning Pipeline&lt;/h1&gt;
&lt;p&gt;Machine Learning Pipeline is close to the idea of converting all the python code from jupyter notebooks to python scripts.
Instead of writing your own python scripts for training ML model, with ML pipeline library, such as 
&lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Luigi&lt;/a&gt;, &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjv18jvn779AhWAYPEDHZhUCDYQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fairflow.apache.org%2F&amp;amp;usg=AOvVaw388kHRAT6nV9AH5zbkuDlv&quot;&gt;Apache Airflow&lt;/a&gt;
,
&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwi--JP7n779AhXtSfEDHTuzD-8QFnoECAkQAQ&amp;amp;url=https%3A%2F%2Fkedro.org%2F&amp;amp;usg=AOvVaw0JWG6cOFLtdy93D5ohUxle&quot;&gt;Kedro&lt;/a&gt;, you can quickly convert your python code in jupyter notebooks to a modern popular ML model training pipeline. Train 
a model becomes the most easiest thing to do, just through one terminal command, the training will be started. WHat you need
to do is just wait, wait until the pipeline finishes and get the outputs you need.&lt;/p&gt;

&lt;h1 id=&quot;why-luigi&quot;&gt;Why Luigi&lt;/h1&gt;
&lt;p&gt;I have used luigi in 2019. Back then, I just had 2 years of working experience and still counted as a newbie.
I continued developed a luigi pipeline. It’s a luigi pipeline runs periodically. This time, I first thought about luigi.
Since there are other colleagues from work are also using luigi pipeline. I decide to use it again.&lt;/p&gt;

&lt;h1 id=&quot;upside-about-luigi&quot;&gt;Upside about Luigi&lt;/h1&gt;
&lt;p&gt;Luigi pipeline is very easy to learn and use. For each pipeline step what you need to do is to define the required inputs,
outs and a run function. If you have a very complicated logic about your training pipeline, such as chaining small pipeline
steps to a relative big pipeline steps or creating new pipeline steps at running, don’t worry, it’s very easy to implement 
it with luigi.&lt;/p&gt;

&lt;h1 id=&quot;a-tip-about-using-luigi&quot;&gt;A tip about using Luigi&lt;/h1&gt;
&lt;p&gt;I have seen many people built a very big luigi pipeline, containing a lot of folders, sub-folders for source code. At the 
end, even with luigi, the whole pipeline structure is so bloated, such that developer gets lost in the code very easily.
And the maintenance of such huge pipeline is a nightmare.&lt;/p&gt;

&lt;p&gt;An easy way to keep your pipeline structure as simple as possible, is to build a python package containing all the core
functions, classes. What you have to do with your luigi pipeline is just import those functions or classes and use them
in the run function of each pipeline step. By doing so, your luigi pipeline structure will be just a folder containing each
pipeline step as a independent python file. The maintenance work for a python package and a simple luigi pipeline becomes 
much easier than for a huge complicated luigi pipeline.&lt;/p&gt;

&lt;h1 id=&quot;downside-about-luigi&quot;&gt;Downside about luigi&lt;/h1&gt;
&lt;p&gt;Personally I like to write tests as many as possible to make sure the stability of my code. And tests makes debug easy
as well. But when I start to write tests for my luigi pipeline, I start to have headaches. There isn’t many tutorials 
out there for write tests for luigi pipeline. And the library luigi itself doesn’t provide any testing functions.&lt;/p&gt;

&lt;p&gt;I spent a lot of time on writing tests for luigi pipeline. Mock from unittest package, doesn’t help that much. What I figured 
out at the end, is to prepare a testing data for my luigi pipeline. I run the pipeline with it to have the outputs from
all the pipeline steps. Then I zipped the outputs for each pipeline step and put them in the &lt;em&gt;resources&lt;/em&gt; folder of &lt;em&gt;tests&lt;/em&gt; folder.
To test each pipeline step, I just need to prepare the required inputs for it and execute the pipeline for the particular step.
Then check the outputs of the pipeline step. With this approach, I’m finally able to test my training pipeline. However,
I ended up with having too many binary files in the &lt;em&gt;resources&lt;/em&gt; folder. For now, I can accept it.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Luigi pipeline is definitely an awesome ML pipeline library, it’s worth you to try at least. Just bear in mind that testing
your pipeline is not an easy job, but also not impossible.&lt;/p&gt;

&lt;p&gt;For the next step, I will try with - &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjv18jvn779AhWAYPEDHZhUCDYQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fairflow.apache.org%2F&amp;amp;usg=AOvVaw388kHRAT6nV9AH5zbkuDlv&quot;&gt;Apache Airflow&lt;/a&gt;
, and do a comparison with &lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Luigi&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spotify/luigi&quot;&gt;Luigi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjv18jvn779AhWAYPEDHZhUCDYQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fairflow.apache.org%2F&amp;amp;usg=AOvVaw388kHRAT6nV9AH5zbkuDlv&quot;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwi--JP7n779AhXtSfEDHTuzD-8QFnoECAkQAQ&amp;amp;url=https%3A%2F%2Fkedro.org%2F&amp;amp;usg=AOvVaw0JWG6cOFLtdy93D5ohUxle&quot;&gt;Kedro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhiwei Zhang</name></author><category term="blog" /><category term="Luigi Pipeline" /><category term="Feedback" /><summary type="html">Introduction In data science project, normally data scientists would use jupyter notebooks for developing Machine Learning models. A good thing about jupyter notebooks is the interactiveness with end user. No matter which Machine Learning library you use, scikit-learn, tensorflow or pytorch, with jupyter notebook you can develop your model step by step and check the intermediate outputs at every time. However, when the DS project is in production environment, the ML model training pipeline should be already stable and the interactiveness of jupyter notebook becomes less and less important. Should we then stop using jupyter notebooks at this point? What’s the alternative solution? I think many people would ask these two questions. And the answer is quite simple, use the ML pipeline library to build your ML model training pipeline. Machine Learning Pipeline Machine Learning Pipeline is close to the idea of converting all the python code from jupyter notebooks to python scripts. Instead of writing your own python scripts for training ML model, with ML pipeline library, such as Luigi, Apache Airflow , Kedro, you can quickly convert your python code in jupyter notebooks to a modern popular ML model training pipeline. Train a model becomes the most easiest thing to do, just through one terminal command, the training will be started. WHat you need to do is just wait, wait until the pipeline finishes and get the outputs you need. Why Luigi I have used luigi in 2019. Back then, I just had 2 years of working experience and still counted as a newbie. I continued developed a luigi pipeline. It’s a luigi pipeline runs periodically. This time, I first thought about luigi. Since there are other colleagues from work are also using luigi pipeline. I decide to use it again. Upside about Luigi Luigi pipeline is very easy to learn and use. For each pipeline step what you need to do is to define the required inputs, outs and a run function. If you have a very complicated logic about your training pipeline, such as chaining small pipeline steps to a relative big pipeline steps or creating new pipeline steps at running, don’t worry, it’s very easy to implement it with luigi. A tip about using Luigi I have seen many people built a very big luigi pipeline, containing a lot of folders, sub-folders for source code. At the end, even with luigi, the whole pipeline structure is so bloated, such that developer gets lost in the code very easily. And the maintenance of such huge pipeline is a nightmare. An easy way to keep your pipeline structure as simple as possible, is to build a python package containing all the core functions, classes. What you have to do with your luigi pipeline is just import those functions or classes and use them in the run function of each pipeline step. By doing so, your luigi pipeline structure will be just a folder containing each pipeline step as a independent python file. The maintenance work for a python package and a simple luigi pipeline becomes much easier than for a huge complicated luigi pipeline. Downside about luigi Personally I like to write tests as many as possible to make sure the stability of my code. And tests makes debug easy as well. But when I start to write tests for my luigi pipeline, I start to have headaches. There isn’t many tutorials out there for write tests for luigi pipeline. And the library luigi itself doesn’t provide any testing functions. I spent a lot of time on writing tests for luigi pipeline. Mock from unittest package, doesn’t help that much. What I figured out at the end, is to prepare a testing data for my luigi pipeline. I run the pipeline with it to have the outputs from all the pipeline steps. Then I zipped the outputs for each pipeline step and put them in the resources folder of tests folder. To test each pipeline step, I just need to prepare the required inputs for it and execute the pipeline for the particular step. Then check the outputs of the pipeline step. With this approach, I’m finally able to test my training pipeline. However, I ended up with having too many binary files in the resources folder. For now, I can accept it. Conclusion Luigi pipeline is definitely an awesome ML pipeline library, it’s worth you to try at least. Just bear in mind that testing your pipeline is not an easy job, but also not impossible. For the next step, I will try with - Apache Airflow , and do a comparison with Luigi. References Luigi Apache Airflow Kedro</summary></entry><entry><title type="html">Build a hackintosh from scratch</title><link href="http://localhost:4000/blog/build-a-hackintosh-from-scratch/" rel="alternate" type="text/html" title="Build a hackintosh from scratch" /><published>2023-01-17T01:56:15+01:00</published><updated>2023-01-17T01:56:15+01:00</updated><id>http://localhost:4000/blog/build-a-hackintosh-from-scratch</id><content type="html" xml:base="http://localhost:4000/blog/build-a-hackintosh-from-scratch/">&lt;h2 id=&quot;what-is-hackintosh&quot;&gt;What is hackintosh&lt;/h2&gt;

&lt;p&gt;Hackintosh is the corresponding word to macintosh, which is the operation system developed by Apple officially.
On the contrary, hackintosh is installing the macOS system on the mobile/desktop products not from Apple. You can
call it fake macOS.&lt;/p&gt;

&lt;h2 id=&quot;why-hackintosh&quot;&gt;Why hackintosh&lt;/h2&gt;
&lt;p&gt;Thinking about the upsides of the macOS and the expensiveness of Apple mobile/desktop products, 
hackintosh becomes popular in these days. Especially, the software OpenCore makes the installation of hackintosh much 
easier than before.&lt;/p&gt;

&lt;p&gt;For the people installing hackintosh on their PCs, it makes the hardware upgrading smooth and repairing easy.&lt;/p&gt;

&lt;p&gt;I was dissatisfied with Apple mobile products’ quality. I have 4 MacBook Pro in use now, MacBook Pro 15 (2013 late),
MacBook Pro 15 (2016), MacBook Pro 13 (2018) and MacBook Pro 16 (2019). Beside the MacBook Pro 15 (2013 late), all 
the other laptops have broken hardware issues except battery :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacBook Pro 15 (2016): broken backlight cable, broken key c in the butterfly keyboard.&lt;/li&gt;
  &lt;li&gt;MacBook Pro 13 (2018) and MacBook Pro 16 (2019): screen turns to completely black, when opening the screen more than 
120 degree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The broken backlight cable is the common issue with the MacBook from 2016 to 2018. However,
Apple only provides free repairing for the MacBook Pro 13, not the MacBook Pro 15. Apple does provide a free repairing for
the keyboard, but only for the products purchased in 4 years. Mine was broken at its 5th year. I contacted Apple customer 
hotline, they said I had to pay 1000 EUR to repair it. I was furious about their attitude and decided to not buy any Apple
mobile/desktop products in the future. Since I have been using macOS in the last 10 years, I decided to install hackintosh
on my newly built PC.&lt;/p&gt;

&lt;h2 id=&quot;hardware-specs&quot;&gt;Hardware specs&lt;/h2&gt;
&lt;p&gt;Hackintosh has a list of compatible hardware, Please check the section 
&lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html&quot;&gt;Hardware Limitations&lt;/a&gt; from
&lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide&quot;&gt;OpenCore Install Guide&lt;/a&gt; for more information. 
Generally speaking, Intel CPU + AMD GPU + Broadcom Wifi/BT card is the best option for installing hackintosh, and
it’s also the easiest one.&lt;/p&gt;

&lt;p&gt;Here is the hardware from my PC&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Hardware&lt;/th&gt;
      &lt;th&gt;Brand&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MotherBoard&lt;/td&gt;
      &lt;td&gt;Asus B660i&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CPU&lt;/td&gt;
      &lt;td&gt;Intel 12700F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GPU&lt;/td&gt;
      &lt;td&gt;Sapphire Nitro+ Radeon RX 6600 XT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RAM&lt;/td&gt;
      &lt;td&gt;Corsair Vengeance schwarz DIMM Kit 64GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SSD&lt;/td&gt;
      &lt;td&gt;Western Digital WD_BLACK SN850 NVMe SSD 1TB * 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WIFI/Bluetooth Card&lt;/td&gt;
      &lt;td&gt;Broadcom BCM94360Z3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PSU&lt;/td&gt;
      &lt;td&gt;Corsair SF750&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;version&quot;&gt;Version&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;macOS Monterey 12.6.1&lt;/li&gt;
  &lt;li&gt;OpenCore: 0.8.6 (RELEASE)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-works&quot;&gt;What works&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;macOS Monterey&lt;/li&gt;
  &lt;li&gt;Shutdown&lt;/li&gt;
  &lt;li&gt;Reboot&lt;/li&gt;
  &lt;li&gt;Sleep&lt;/li&gt;
  &lt;li&gt;HDMI/DP&lt;/li&gt;
  &lt;li&gt;Ethernet&lt;/li&gt;
  &lt;li&gt;Wifi/BT&lt;/li&gt;
  &lt;li&gt;USB Ports&lt;/li&gt;
  &lt;li&gt;Audio&lt;/li&gt;
  &lt;li&gt;AirDrop/Handoff/Unlock with Apple Watch… (All Continuity features except Sidecar)&lt;/li&gt;
  &lt;li&gt;DRM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-doesnt-work&quot;&gt;What doesn’t work&lt;/h2&gt;

&lt;p&gt;None&lt;/p&gt;

&lt;h2 id=&quot;preparation-before-installation&quot;&gt;Preparation before installation&lt;/h2&gt;

&lt;p&gt;A USB stick with more or equal than 16 GB space and a computer with operation system installed to make the USB installer.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-usb-installer&quot;&gt;Creating the USB installer&lt;/h2&gt;

&lt;p&gt;Please check the section &lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide/installer-guide/&quot;&gt;Creating the USB&lt;/a&gt; from 
&lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide&quot;&gt;OpenCore Install Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;opencore-configuration&quot;&gt;OpenCore configuration&lt;/h2&gt;

&lt;p&gt;I’m using OpenCore 0.8.6, if you want to use the EFI provided by me, please make sure you’re using the same version of 
OpenCore. Different versions of OpenCore may cause differences in the output &lt;strong&gt;config.plist&lt;/strong&gt; file, which could lead to
errors during installation or even unable to boot.&lt;/p&gt;

&lt;p&gt;For the rest, please follow the section &lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide/installer-guide/mac-install.html#setting-up-opencore-s-efi-environment&quot;&gt;Setting up OpenCore’s EFI environment&lt;/a&gt; from
&lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide&quot;&gt;OpenCore Install Guide&lt;/a&gt; to mount the EFI drive from USB, then use 
the folders &lt;strong&gt;Boot&lt;/strong&gt; and &lt;strong&gt;OC&lt;/strong&gt; from the EFI I provided to replace the ones from the mounted EFI drive from USB.&lt;/p&gt;

&lt;h2 id=&quot;bios-setup&quot;&gt;BIOS Setup&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Advanced &amp;gt; CPU Configuration &amp;gt; Intel (VMX) Virtualization Technology &amp;gt; Enabled (defalut)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; CPU Configuration &amp;gt; Active Performance Cores &amp;gt; All&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; CPU Configuration &amp;gt; Hyper-Threading &amp;gt; Enabled (defalut)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; System Agent (SA) Configuration &amp;gt; VT-d &amp;gt; Enabled (defalut)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; System Agent (SA) Configuration &amp;gt; Control Iommu Pre-boot Behavior &amp;gt; Disable IOMMU (default)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; PCI Subsystem Settings &amp;gt; Above 4G Decording &amp;gt; Enabled (defalut)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; PCI Subsystem Settings &amp;gt; Re-Size BAR Support &amp;gt; Enabled (defalut)&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; USB Configuration &amp;gt; Legacy USB Support &amp;gt; Enabled&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; USB Configuration &amp;gt; XHCI Hand-off &amp;gt; Enabled&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; Network Stack Configuration &amp;gt; Network Stack &amp;gt; Disabled&lt;/li&gt;
  &lt;li&gt;Advanced &amp;gt; USB Configuration &amp;gt; Legacy USB Support &amp;gt; Enabled&lt;/li&gt;
  &lt;li&gt;Boot &amp;gt; CSM (Compatibility Support Module) &amp;gt; Launch CSM &amp;gt; Disabled&lt;/li&gt;
  &lt;li&gt;Boot &amp;gt; Secure Boot &amp;gt; OS Type &amp;gt; Other OS&lt;/li&gt;
  &lt;li&gt;Boot &amp;gt; Secure Boot Mode &amp;gt; Custom&lt;/li&gt;
  &lt;li&gt;Boot &amp;gt; Boot Configuration &amp;gt; Fast Boot &amp;gt; Disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Please check the section &lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide/installation/installation-process.html#double-checking-your-work&quot;&gt;Installation process&lt;/a&gt;
and section &lt;a href=&quot;https://dortania.github.io/OpenCore-Post-Install/&quot;&gt;Post Install&lt;/a&gt; from &lt;a href=&quot;https://dortania.github.io/OpenCore-Install-Guide&quot;&gt;OpenCore Install Guide&lt;/a&gt; to install Monterey.&lt;/p&gt;

&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/system_info.png&quot; alt=&quot;system_info&quot; /&gt;
&lt;img src=&quot;../../assets/images/geekbench_score.png&quot; alt=&quot;geekbench_score&quot; /&gt;
&lt;img src=&quot;../../assets/images/bluetooth.png&quot; alt=&quot;bluetooth&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dual-boot-with-windows-11&quot;&gt;Dual Boot with Windows 11&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download the Windows 11 iso from windows official website&lt;/li&gt;
  &lt;li&gt;Make the USB installation drive.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Windows 11&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;By default, Windows system cannot use the Broadcom WIFI/Bluetooth card. Therefore, at the stage &lt;strong&gt;connect to internet&lt;/strong&gt; you cannot find any wifi, if you don’t connect your PC with a LAN cable.&lt;/li&gt;
      &lt;li&gt;However, there is no button for skipping this step by default. You can solve this issue by pressing &lt;strong&gt;Shift&lt;/strong&gt; + &lt;strong&gt;F10&lt;/strong&gt; to open the terminal and inputting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOBE\BYPASSNRO&lt;/code&gt; to skip this step.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When you finish the installation, download the file &lt;strong&gt;win_10_64_bcm_driver.zip&lt;/strong&gt;, and install the drivers for bluetooth and wifi individually.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zhiwei2017/Hackintosh-Asus-B660i-12700F-Sapphire-6600xt&quot;&gt;GitHub - zhiwei2017/Hackintosh-Asus-B660i-12700F-Sapphire-6600xt: Hackintosh in Monterey with OC 0.8.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mackie100projects.altervista.org/download/opencore-configurator-2-63-1-0/?wpdmdl=2359&amp;amp;refresh=63c6be9aae26f1673969306&quot;&gt;OpenCore Configurator 2.63.1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thankscredits&quot;&gt;Thanks/Credits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dortania.github.io/getting-started/&quot;&gt;Opencore Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhiwei Zhang</name></author><category term="blog" /><category term="hackintosh" /><category term="Monterey" /><category term="installation" /><category term="Intel CPU" /><category term="AMD GPU" /><category term="Broadcom Wifi/BT card" /><summary type="html">What is hackintosh Hackintosh is the corresponding word to macintosh, which is the operation system developed by Apple officially. On the contrary, hackintosh is installing the macOS system on the mobile/desktop products not from Apple. You can call it fake macOS. Why hackintosh Thinking about the upsides of the macOS and the expensiveness of Apple mobile/desktop products, hackintosh becomes popular in these days. Especially, the software OpenCore makes the installation of hackintosh much easier than before. For the people installing hackintosh on their PCs, it makes the hardware upgrading smooth and repairing easy. I was dissatisfied with Apple mobile products’ quality. I have 4 MacBook Pro in use now, MacBook Pro 15 (2013 late), MacBook Pro 15 (2016), MacBook Pro 13 (2018) and MacBook Pro 16 (2019). Beside the MacBook Pro 15 (2013 late), all the other laptops have broken hardware issues except battery : MacBook Pro 15 (2016): broken backlight cable, broken key c in the butterfly keyboard. MacBook Pro 13 (2018) and MacBook Pro 16 (2019): screen turns to completely black, when opening the screen more than 120 degree. The broken backlight cable is the common issue with the MacBook from 2016 to 2018. However, Apple only provides free repairing for the MacBook Pro 13, not the MacBook Pro 15. Apple does provide a free repairing for the keyboard, but only for the products purchased in 4 years. Mine was broken at its 5th year. I contacted Apple customer hotline, they said I had to pay 1000 EUR to repair it. I was furious about their attitude and decided to not buy any Apple mobile/desktop products in the future. Since I have been using macOS in the last 10 years, I decided to install hackintosh on my newly built PC. Hardware specs Hackintosh has a list of compatible hardware, Please check the section Hardware Limitations from OpenCore Install Guide for more information. Generally speaking, Intel CPU + AMD GPU + Broadcom Wifi/BT card is the best option for installing hackintosh, and it’s also the easiest one. Here is the hardware from my PC Hardware Brand MotherBoard Asus B660i CPU Intel 12700F GPU Sapphire Nitro+ Radeon RX 6600 XT RAM Corsair Vengeance schwarz DIMM Kit 64GB SSD Western Digital WD_BLACK SN850 NVMe SSD 1TB * 2 WIFI/Bluetooth Card Broadcom BCM94360Z3 PSU Corsair SF750 Version macOS Monterey 12.6.1 OpenCore: 0.8.6 (RELEASE) What works macOS Monterey Shutdown Reboot Sleep HDMI/DP Ethernet Wifi/BT USB Ports Audio AirDrop/Handoff/Unlock with Apple Watch… (All Continuity features except Sidecar) DRM What doesn’t work None Preparation before installation A USB stick with more or equal than 16 GB space and a computer with operation system installed to make the USB installer. Creating the USB installer Please check the section Creating the USB from OpenCore Install Guide OpenCore configuration I’m using OpenCore 0.8.6, if you want to use the EFI provided by me, please make sure you’re using the same version of OpenCore. Different versions of OpenCore may cause differences in the output config.plist file, which could lead to errors during installation or even unable to boot. For the rest, please follow the section Setting up OpenCore’s EFI environment from OpenCore Install Guide to mount the EFI drive from USB, then use the folders Boot and OC from the EFI I provided to replace the ones from the mounted EFI drive from USB. BIOS Setup Advanced &amp;gt; CPU Configuration &amp;gt; Intel (VMX) Virtualization Technology &amp;gt; Enabled (defalut) Advanced &amp;gt; CPU Configuration &amp;gt; Active Performance Cores &amp;gt; All Advanced &amp;gt; CPU Configuration &amp;gt; Hyper-Threading &amp;gt; Enabled (defalut) Advanced &amp;gt; System Agent (SA) Configuration &amp;gt; VT-d &amp;gt; Enabled (defalut) Advanced &amp;gt; System Agent (SA) Configuration &amp;gt; Control Iommu Pre-boot Behavior &amp;gt; Disable IOMMU (default) Advanced &amp;gt; PCI Subsystem Settings &amp;gt; Above 4G Decording &amp;gt; Enabled (defalut) Advanced &amp;gt; PCI Subsystem Settings &amp;gt; Re-Size BAR Support &amp;gt; Enabled (defalut) Advanced &amp;gt; USB Configuration &amp;gt; Legacy USB Support &amp;gt; Enabled Advanced &amp;gt; USB Configuration &amp;gt; XHCI Hand-off &amp;gt; Enabled Advanced &amp;gt; Network Stack Configuration &amp;gt; Network Stack &amp;gt; Disabled Advanced &amp;gt; USB Configuration &amp;gt; Legacy USB Support &amp;gt; Enabled Boot &amp;gt; CSM (Compatibility Support Module) &amp;gt; Launch CSM &amp;gt; Disabled Boot &amp;gt; Secure Boot &amp;gt; OS Type &amp;gt; Other OS Boot &amp;gt; Secure Boot Mode &amp;gt; Custom Boot &amp;gt; Boot Configuration &amp;gt; Fast Boot &amp;gt; Disabled Installation Please check the section Installation process and section Post Install from OpenCore Install Guide to install Monterey. Screenshots Dual Boot with Windows 11 Download the Windows 11 iso from windows official website Make the USB installation drive. Install Windows 11 By default, Windows system cannot use the Broadcom WIFI/Bluetooth card. Therefore, at the stage connect to internet you cannot find any wifi, if you don’t connect your PC with a LAN cable. However, there is no button for skipping this step by default. You can solve this issue by pressing Shift + F10 to open the terminal and inputting OOBE\BYPASSNRO to skip this step. When you finish the installation, download the file win_10_64_bcm_driver.zip, and install the drivers for bluetooth and wifi individually. Download GitHub - zhiwei2017/Hackintosh-Asus-B660i-12700F-Sapphire-6600xt: Hackintosh in Monterey with OC 0.8.6 OpenCore Configurator 2.63.1.0 Thanks/Credits Opencore Team</summary></entry><entry><title type="html">Findings to Python Packages tld and tldextract</title><link href="http://localhost:4000/blog/findings-to-python-packages-tld-and-tldextract/" rel="alternate" type="text/html" title="Findings to Python Packages tld and tldextract" /><published>2022-04-08T02:56:15+02:00</published><updated>2022-04-08T02:56:15+02:00</updated><id>http://localhost:4000/blog/findings-to-python-packages-tld-and-tldextract</id><content type="html" xml:base="http://localhost:4000/blog/findings-to-python-packages-tld-and-tldextract/">&lt;p&gt;Python Package &lt;strong&gt;tldextract&lt;/strong&gt; is used by the framework &lt;strong&gt;scrapy&lt;/strong&gt; for getting the top level domain. 
However, on the very first call of the function &lt;strong&gt;tldextract.extract&lt;/strong&gt;, it will try to download the suffix list 
from &lt;a href=&quot;https://publicsuffix.org&quot;&gt;https://publicsuffix.org&lt;/a&gt; via HTTP request by default.&lt;/p&gt;

&lt;p&gt;In my opinion, this is a very dangerous design for the projects using its default configuration 
in Prod environment. Even though the author of the package &lt;strong&gt;tldextract&lt;/strong&gt; stated it in the README.md 
from &lt;a href=&quot;https://github.com/john-kurkowski/tldextract&quot;&gt;https://github.com/john-kurkowski/tldextract&lt;/a&gt;, but the 
&lt;strong&gt;scrapy&lt;/strong&gt; framework didn’t mention it in their documentation.&lt;/p&gt;

&lt;p&gt;The solution to use a local downloaded suffix list is very simple, you can just simply add 
those two lines in your &lt;strong&gt;Dockerfile&lt;/strong&gt; after installing all the dependencies listed in your requirements.txt file:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TLDEXTRACT_CACHE=&quot;$HOME/.cache/python-tldextract&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;tldextract &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above will specify the cache path and download the suffix list while building docker images.&lt;/p&gt;</content><author><name>Zhiwei Zhang</name></author><category term="blog" /><category term="Python" /><category term="tld" /><category term="tldextract" /><summary type="html">Python Package tldextract is used by the framework scrapy for getting the top level domain. However, on the very first call of the function tldextract.extract, it will try to download the suffix list from https://publicsuffix.org via HTTP request by default.</summary></entry></feed>